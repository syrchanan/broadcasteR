% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pareto_skyline.R
\name{paretoset}
\alias{paretoset}
\title{Identify Pareto Efficient Solutions or Skyline Ranks}
\usage{
paretoset(
  df,
  method = c("pareto", "skyline"),
  distinct = T,
  optimization = NULL,
  max_rank = NULL
)
}
\arguments{
\item{df}{A data frame of numeric values, where rows represent observations
and columns represent different objectives.}

\item{method}{Character string, either \code{"pareto"} to identify the Pareto
efficient set, or \code{"skyline"} to calculate Pareto skyline ranks.
Defaults to \code{"pareto"}.}

\item{distinct}{Logical. If \code{TRUE}, only distinct Pareto points are considered
(for \code{"pareto"} method) or ranked (for \code{"skyline"} method). Defaults to \code{TRUE}.}

\item{optimization}{Character vector specifying the optimization direction
for each column in \code{df}. Can be \code{"min"} for minimization or \code{"max"} for
maximization. If \code{NULL}, all objectives are assumed to be minimized.
The length of this vector must match the number of columns in \code{df}.}

\item{max_rank}{Numeric. Applies only when \code{method = "skyline"}. Specifies
the maximum Pareto rank to compute. If \code{NULL}, all ranks are computed.}
}
\value{
If \code{method = "pareto"}, a numeric vector of the same length as the number of rows in \code{df}.
Values are \code{1} for Pareto efficient points and \code{NA} for dominated points.
If \code{method = "skyline"}, a numeric vector of the same length as the number of rows in \code{df}.
Values represent the Pareto rank (1 for the first skyline, 2 for the second, etc.)
and \code{NA} for points beyond \code{max_rank} or not ranked.
}
\description{
This function identifies Pareto efficient solutions or calculates Pareto
skyline ranks for multi-objective optimization problems. It supports both
minimization and maximization of objectives.
}
\examples{
# Example with Pareto set identification (minimization)
data <- data.frame(
  x = c(10, 20, 15, 5, 25),
  y = c(10, 5, 20, 15, 12)
)
pareto_set_result <- paretoset(data, method = "pareto", optimization = c("min", "min"))
data$pareto_set <- pareto_set_result
print(data)

# Example with Skyline ranks (maximization)
data_skyline <- data.frame(
  profit = c(100, 120, 90, 110, 130),
  quality = c(8, 7, 9, 6, 8.5)
)
skyline_ranks_result <- paretoset(
  data_skyline,
  method = "skyline",
  optimization = c("max", "max"),
  max_rank = 3
)
data_skyline$skyline_rank <- skyline_ranks_result
print(data_skyline)

# Plotting example (requires ggplot2)
\dontrun{
library(ggplot2)
tibble::tibble(
  x = runif(1000, 100, 900),
  y = runif(1000, 100, 900)
) \%>\%
  dplyr::bind_cols(
    pareto = paretoset(
      df = .,
      method = "skyline",
      distinct = TRUE,
      optimization = c("max", "max"),
      max_rank = 25
    )
  ) -> sample_data

ggplot2::ggplot(sample_data) +
  ggplot2::geom_point(ggplot2::aes(x, y, color = pareto)) +
  ggplot2::scale_color_viridis_c(
    "Pareto Rank",
    direction = -1,
    guide = ggplot2::guide_colorbar(reverse = TRUE)
  )
}
}
